{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    return bin(num1 ^ num2).count('1') == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    return set([word for word in s.split() if len(word) >= 4])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    return len(s) - s.count(s[0])"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    s = s.replace(c, '', 1)\n    s = s.replace(c, '', 1)\n    return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    return text.islower() and '_' in text"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join([c for c in s1 if c not in s2])"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(set(arr)) != len(arr)"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n % 3 == 0:\n        return False\n    if n == 5:\n        return True\n    if n % 5 == 0:\n        return False\n    if n == 7:\n        return True\n    if n % 7 == 0:\n        return False\n    if n == 11:\n        return True\n    if n % 11 == 0:\n        return False\n    if n == 13:\n        return True\n    if n % 13 == 0:\n        return False\n    if n == 17:\n        return True\n    if n % 17 == 0:\n        return False\n    if n == 19:\n        return True\n    if n % 19 == 0:\n        return False\n    if n == 23:\n        return True\n    if n % 23 == 0:\n        return False\n    if n == 29:\n        return True\n    if n % 29 == 0:\n        return False\n    if n == 31:\n        return True\n    if n % 31 == 0:\n        return False\n    if n == 37:\n        return True\n    if n % 37 == 0:\n        return False\n    if n == 41:\n        return True\n    if n % 41 == 0:\n        return False\n    if n == 43:\n        return True\n    if n % 43 == 0:\n        return False\n    if n == 47:\n        return True\n    if n % 47 == 0:\n        return False\n    if n == 53:\n        return True\n    if n % 53 == 0:\n        return False\n    if n == 59:\n        return True\n    if n % 59 == 0:\n        return False\n    if n == 61:\n        return True\n    if n % 61 == 0:\n        return False\n    if n == 67:\n        return True\n    if n % 67 == 0:\n        return False\n    if n == 71:\n        return True\n    if n % 71 == 0:\n        return False\n    if n == 73:\n        return True\n    if n % 73 == 0:\n        return False\n    if n == 79:\n        return True\n    if n % 79 == 0:\n        return False\n    if n == 83:\n        return True\n    if n % 83 == 0:\n        return False\n    if n == 89:\n        return True\n    if n % 89 == 0:\n        return False\n    if n == 97:\n        return True\n    if n % 97 == 0:\n        return False\n    if n == 101:\n        return True\n    if n % 101 == 0:\n        return False\n    if n == 103:\n        return True\n    if n % 103 == 0:\n        return False\n    if n == 107:\n        return True"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    return n == 2 * int(str(n)[::-1]) - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    return a * b < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return (8 * n - 1) ** 0.5 % 1 == 0"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(digit) for digit in s[i:j+1]) == j - i + 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(lst):\n    max_diff = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[j][0] - lst[i][0] > max_diff:\n                max_diff = lst[j][0] - lst[i][0]\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples):\n    return sorted(tuples, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    return sum([item for sublist in lst for item in sublist])"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return len([x for x in lst if x > 0])"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(k) * bell_number(n - k) for k in range(n + 1))"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    return sublst in lst"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    return all(len(t) == len(tuples[0]) for t in tuples)"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    while gap > 1 or any(arr[i] > arr[i + 1] for i in range(len(arr) - 1)):\n        gap = int(gap / shrink_factor)\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    return n % 4 != 0"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    return [t for t in tuples if all(x % k == 0 for x in t)]"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    return n % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    return {i: lst.count(i) for i in set(lst)}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, sub):\n    for i in lst:\n        if sub in i:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    for i in range(1, len(s) - 1):\n        if s[i] != s[i - 1] and s[i] != s[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    return min(len(lst) for lst in list_of_lists)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(lst):\n    return sum(lst) / len(lst)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    return bin(n)[2:]"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n = str(n)\n    for i in range(len(n) - 1, -1, -1):\n        if n[i] != '9':\n            n = n[:i] + str(int(n[i]) + 1) + n[i + 1:]\n            return int(n)\n    return int(n) + 1"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    return ''.join(x.capitalize() or '_' for x in snake_str.split('_'))"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 0:\n        return 1\n    if m == n:\n        return 0\n    if m > n:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    return lst.count(True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    count = 0\n    for i in range(rotations):\n        if int(binary_string[i]) % 2 != 0:\n            count += 1\n        binary_string = binary_string[1:] + binary_string[0]\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = abs(tuples[i][0] * tuples[i][1]) * abs(tuples[j][0] * tuples[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        return sum([i for i in range(1, x) if x % i == 0])\n    amicable_numbers = []\n    for i in range(1, n + 1):\n        if sum_of_divisors(i) != i and sum_of_divisors(sum_of_divisors(i)) == i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"}
{"task_id": "Mbpp/124", "solution": "import cmath\nimport math\ndef angle_complex(x, y):\n    return cmath.phase(complex(x, y))"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    # Check if the matrix is a square\n    if n != len(matrix[0]):\n        return False\n    # Check if the sum of each row, column, and diagonal is the same\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        col_sum = sum(matrix[j][i] for j in range(n))\n        diag_sum1 = sum(matrix[i][i] for i in range(n))\n        diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n        if row_sum != col_sum or row_sum != diag_sum1 or row_sum != diag_sum2:\n            return False\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    return max(set(lst), key=lst.count)"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    return sum([num for num in nums if num < 0])"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 3*n*n - 2*n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    return arr.count(0) / len(arr)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n > 0:\n        if n % 2 == 1:\n            return False\n        n = n // 2\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    return set([item for sublist in lst for item in sublist])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        max_index = arr.index(max(arr[:i + 1]))\n        arr[:max_index + 1] = arr[:max_index + 1][::-1]\n        arr[:i + 1] = arr[:i + 1][::-1]\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    for x in range(n // a + 1):\n        y = (n - a * x) / b\n        if y.is_integer():\n            return (x, int(y))\n    return None"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum([n - 2 * i for i in range(n // 2 + 1)])"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() == chr(ord('a') + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    return all(isinstance(i, type(tup[0])) for i in tup)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return s[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, c):\n    return s.replace(' ', c)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    return n | (n >> 1)"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    return {t: lst.count(t) for t in set(lst)}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    return len(s) * (len(s) + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return m // 2\n    if m < 2 * n:\n        return 0\n    return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m // 2, n - 2)"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    return (int(n**0.5)+1)**2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + 1)\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + 1)\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - 1)\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, x):\n    return tup.count(x)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    return [element] + lst"}
{"task_id": "Mbpp/252", "solution": "import cmath\ndef convert(complex_num):\n    return cmath.polar(complex_num)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return len([i for i in lst if isinstance(i, int)])"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    if n == 0:\n        return [()]\n    combinations = []\n    for color in colors:\n        for combination in combinations_colors(colors, n-1):\n            combinations.append((color,) + combination)\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return sum(primes)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(sorted(tuple1 + tuple2, key=lambda x: x[0]))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n        i += 2\n    return primes[-1]"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(x / y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years < 0:\n        return \"Invalid input\"\n    elif human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    return sum([2*i+1 for i in range(n)])**2"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return n * (n + 1) * (2 * n + 1) / 6"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples):\n    return [t[-1] for t in tuples]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    return sum([binomial_coefficient(n, i) for i in range(0, n, 2)])"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return (11*n - 1)**0.5 % 1 == 0"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for d in digits:\n        if d > 1 and digits.count(d) > d:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    return 'a' in text and (text.count('b') == 2 or text.count('b') == 3)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    max_sum = float('-inf')\n    for i in range(n):\n        current_sum = 0\n        for j in range(k):\n            current_sum += arr[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_length = 0\n    max_list = []\n    for lst in lists:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return (max_length, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    return max(lst)"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    max_tuple = max(tuples, key=lambda x: x[1])\n    return max_tuple"}
{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    return 2 ** n"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()), default=0)\n    else:\n        return 0"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word[0] == 'p':\n            return word.split()"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, m):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if arr[i-1] <= j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-arr[i-1]] + arr[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][m]"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    return [list1[i] * list2[i] for i in range(n)]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return max(a, b)"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    return n | (n + 1)"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    return math.pi * radius**2 * height / 3"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(set(tup)) == len(tup)"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    return sum(int(digit) for num in lst for digit in str(num))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 != 0"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    return min([x[0] * x[1] for x in tuples])"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    return min(lst)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n    return max1 * max2, min1 * min2"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(nums):\n    return sum(round(num) for num in nums) * len(nums)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum([i**3 for i in range(2, 2*n+1, 2)])"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    return sum([i**3 for i in range(1, n+1)]) / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    return [s[-1] for s in strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    return date[8:] + '-' + date[5:7] + '-' + date[:4]"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tup1, tup2):\n    return tuple(x - y for x, y in zip(tup1, tup2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    return -4*a*c/b"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b + c) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return s[::2]"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(multiple_list):\n    return int(''.join(map(str, multiple_list)))"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    adverbs = ['clearly', 'quickly', 'slowly', 'happily', 'sadly', 'angrily', 'excitedly', 'disappointedly', 'optimistically', 'optimistically']\n    for i, word in enumerate(sentence.split()):\n        if word in adverbs:\n            return (i, i + len(word), word)\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size ** 2"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple1[i] * tuple2[i] for i in range(len(tuple1)))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(lst, elements):\n    count = 0\n    for element in elements:\n        count += lst.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    p1, p2, p3 = 3, 0, 2\n    for i in range(3, n):\n        p1, p2, p3 = p2, p3, p1 + p2 + p3\n    return p1 + p2 + p3"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    return [s for s in strings if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return 'z' in text"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(c for c in s if c.islower())"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if not lst:\n        return [[]]\n    result = []\n    for i in range(len(lst)):\n        for j in combinations_list(lst[:i] + lst[i+1:]):\n            result.append([lst[i]] + j)\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    max_product = min_product = result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    return all(lst[i] + 1 == lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tup1, tup2):\n    return set(tup1) & set(tup2)"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old, new):\n    return s.replace(old, new)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join([c for c in s if c.isupper()])"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    return int(str(n)[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    return (n*(n+1)*(2*n+1))/6 - (n*(n+1))/2"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                odd_count += 1\n    return odd_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(a, b):\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(a), str(b)))"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = arr[0]\n    current_sum = arr[0]\n    for i in range(1, n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    return sorted(set(tup1) | set(tup2))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    return [i[1:-1] for i in s.split(',')]"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return lst == sorted(lst)"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    return list(set(nums))"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    return reduce(lambda x, y: x * y, set(lst))"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr1, arr2):\n    if len(arr1) > len(arr2):\n        return False\n    for i in range(len(arr2) - len(arr1) + 1):\n        if arr1 == arr2[i:i+len(arr1)]:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 0\n    elif n == 6:\n        return 0\n    elif n == 7:\n        return 1\n    elif n == 8:\n        return 0\n    elif n == 9:\n        return 0\n    else:\n        return 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [i for pair in zip(list1, list2, list3) for i in pair]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tup1, tup2):\n    return tuple(set(tup1) ^ set(tup2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(mixed_tuple):\n    even_list = []\n    for item in mixed_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(extract_even(item))\n        elif isinstance(item, int) and item % 2 == 0:\n            even_list.append(item)\n    return tuple(even_list)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    return base_edge ** 2 + 4 * base_edge * height"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (4*n - 2) // (n + 1)"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(data, n):\n    return sorted(data, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(a, b):\n    return [i**2 for i in range(1, int(b**0.5) + 1) if a <= i**2 <= b]"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    return (r * cmath.exp(1j * theta), r * cmath.exp(-1j * theta))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    return [lst[-1]] + lst[1:-1] + [lst[0]]"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    return sum([binomial_coefficient(i) * binomial_coefficient(i + 1) for i in range(n)])"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even = [i for i in lst if i % 2 == 0]\n    odd = [i for i in lst if i % 2 != 0]\n    return even[0] - odd[0]"}
{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(tup):\n    return sys.getsizeof(tup)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n        if k == 0:\n            return arr1[i]\n    if i == len(arr1):\n        return arr2[j]\n    return arr1[i]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    return sum(int(digit) ** len(str(n)) for digit in str(n)) == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    return sum(range(1, n+1)), sum(range(1, n+1)) / n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for c in s:\n        if c in seen:\n            return c\n        seen.add(c)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludic = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic.append(i)\n        elif i == 2:\n            ludic.append(i)\n        elif i == 3:\n            ludic.append(i)\n        elif i == 5:\n            ludic.append(i)\n        elif i == 7:\n            ludic.append(i)\n        elif i == 11:\n            ludic.append(i)\n        elif i == 13:\n            ludic.append(i)\n        elif i == 17:\n            ludic.append(i)\n        elif i == 19:\n            ludic.append(i)\n        elif i == 23:\n            ludic.append(i)\n        elif i == 29:\n            ludic.append(i)\n        elif i == 31:\n            ludic.append(i)\n        elif i == 37:\n            ludic.append(i)\n        elif i == 41:\n            ludic.append(i)\n        elif i == 43:\n            ludic.append(i)\n        elif i == 47:\n            ludic.append(i)\n        elif i == 53:\n            ludic.append(i)\n        elif i == 59:\n            ludic.append(i)\n        elif i == 61:\n            ludic.append(i)\n        elif i == 67:\n            ludic.append(i)\n        elif i == 71:\n            ludic.append(i)\n        elif i == 73:\n            ludic.append(i)\n        elif i == 79:\n            ludic.append(i)\n        elif i == 83:\n            ludic.append(i)\n        elif i == 89:\n            ludic.append(i)\n        elif i == 97:\n            ludic.append(i)\n    return ludic"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degrees):\n    return degrees * 3.141592653589793 / 180"}
{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_Number(k) * bell_Number(n - k - 1) for k in range(n)])"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    return [list(x) for x in zip(*list_of_lists)]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples_list):\n    return sum(sum(t) for t in tuples_list)"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tup1, tup2):\n    return tuple(x % y for x, y in zip(tup1, tup2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    return ''.join([i for i in s if not i.isdigit()]) + ''.join([i for i in s if i.isdigit()])"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    # If n is odd, the median is the middle element\n    if n % 2 != 0:\n        return list1[n // 2]\n    # If n is even, the median is the average of the two middle elements\n    else:\n        return (list1[n // 2 - 1] + list1[n // 2]) / 2"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper() == s"}
{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    return (math.pi * radius * radius) / 4"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(lst):\n    return [i for i in lst if i % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    return [[coord[0] + i, coord[1] + j] for i in range(-1, 2) for j in range(-1, 2) if i != 0 or j != 0]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    return [i for i in lst if i != 0] + [0] * lst.count(0)"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount1, amount2):\n    if amount1 == amount2:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(v, t):\n    return round(13.12 + 0.6215 * t - 11.37 * v**0.16 + 0.3965 * t * v**0.16)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    x = (1 + 24 * n) ** 0.5\n    return x.is_integer()"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    return 'z' in text[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[n-1][n-1] / (n*n)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(data, min_height, min_weight):\n    return {k: v for k, v in data.items() if v[0] > min_height and v[1] > min_weight}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base ** power))"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    return [i[1:-1] for i in s.split('\"')]"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    return [a[i] + b[i] for i in range(len(a))]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]"}
{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid - 1] < num:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum += arr[i] * arr[j]\n    return sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    return n ^ (n >> 1) ^ (n << 1)"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    for i in range(len(arr)):\n        if arr[i] >= x:\n            return i\n    return len(arr)"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(s):\n    return re.match(r'^[aeiouAEIOU]', s) is not None"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    i = 1\n    while True:\n        if len(str(i*(i+1)/2)) == n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(0, len(tup)-1, 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron(a):\n    return (a**3 * (sqrt(2) + sqrt(6))) / 12"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if all(int(digit) != 0 and i % int(digit) == 0 for digit in str(i))]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    return ' '.join(word if word[0].isupper() else ' ' + word for word in s.split())"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + tup"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        if 2*i+1 < n and arr[i] > arr[2*i+1]:\n            return False\n        if 2*i+2 < n and arr[i] > arr[2*i+2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    return [i for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    lst.sort()\n    return lst[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    return {tuple(sublist): lst.count(sublist) for sublist in lst}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float(s)\n        return len(s.split('.')[1]) == 2\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return len([char for char in s if char.isdigit()])"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, sum):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [i for i in list1 if i not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    return sum([i**4 for i in range(1, 2*n, 2)])"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in ['{', '[', '(']:\n            stack.append(char)\n        elif char in ['}', ']', ')']:\n            if not stack:\n                return False\n            if char == '}' and stack[-1] != '{':\n                return False\n            if char == ']' and stack[-1] != '[':\n                return False\n            if char == ')' and stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    return ' '.join([word for word in s.split() if len(word) != k])"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    if substring not in string:\n        return None\n    else:\n        return (substring, string.index(substring), string.rindex(substring))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum([i for i in lst if lst.count(i) == 1])"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append([lst[i]])\n        else:\n            result[-1].append(lst[i])\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    combinations = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            combinations.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total += sum(arr[i:j+1])\n    return total"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = [i for i in lst if i % 2 == 0]\n    odd = [i for i in lst if i % 2 != 0]\n    if len(even) == 0 or len(odd) == 0:\n        return 0\n    else:\n        return even[0] * odd[0]"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    return tuple(int(i) for i in s[1:-1].split(','))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] >= val:\n            return i\n    return len(arr)"}
{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    return text == 'abbb'"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(string, list):\n    return tuple(string + list)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb(text):\n    return text.startswith('a') and text.endswith('b')"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dict):\n    return sum(dict.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    return a == b == c"}
{"task_id": "Mbpp/803", "solution": "import math\ndef is_perfect_square(n):\n    root = math.sqrt(n)\n    return root.is_integer()"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    return max(lst, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for c in s:\n        if c.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuples, k):\n    return k in tuples"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] >= tup2[i]:\n            return False\n    return True"}
